#!/usr/bin/env bash

# Author: Nicolas Giraud <nicolas.giraud.dev@gmail.com>
# Copyright (c) 2017
# License: MIT

set -o errexit  # Make your script exit when a command fails.
set -o pipefail # Catch 'xxx' fails for command 'xxx|yyy'.
set -o nounset  # Exit script when using unset variable.
#set -o xtrace   # Debug mode. Uncomment to activate.

__dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
__root="$(cd "$(dirname "${__dir}")" && pwd)"

# If tool is not installed, just exit without executing it
[[ -d ${__root}/www/vendor/phpstan ]] || exit 0

# Set the URL registry where the docker image to based on is stored.
REGISTRY="phpstan/phpstan:0.11"

# Set dynamic options for the command:
# - Enable the --tty option if there is a tty.
option_tty=$(if [[ "not a tty" = "$(tty)" ]]; then echo ""; else echo " --tty "; fi)

# Build the reports folder where logs will be stored.
QA_BUILD_FOLDER=${QA_BUILD_FOLDER:-${__root}/data/build}
REPORTS_FOLDER="${QA_BUILD_FOLDER}/user/$(date +'%Y%m%d0000')/logs/phpstan"
mkdir -p ${REPORTS_FOLDER} 2>/dev/null

# Run the docker command in parallel.
docker pull ${REGISTRY}
MAX_LEVEL=7
for LEVEL in $(seq 0 ${MAX_LEVEL});
do
    echo -n "PHPStan Level ${LEVEL}/${MAX_LEVEL}: "
    docker run --detach ${option_tty} \
        --name phpstan_level_${LEVEL} \
        --user $(id -u):$(id -g) \
        --volume ${__root}/www:/app \
        --volume ${__root}/www/vendor:/var/www/vendor \
        --volume ${REPORTS_FOLDER}:${REPORTS_FOLDER} \
        ${REGISTRY} analyse \
            --error-format=json \
            --no-progress \
            --level=${LEVEL} \
            /app/src/UserContext
done

# Wait that all commands are done.
echo -n "Waiting for PHPStan to finish..."
while [[ $(docker container ls --quiet --filter name=phpstan_level_ | wc -l) -gt 0 ]]
do
    sleep 1
    echo -n "."
done
echo " [Done]"

# Store the output results in files and remove the container.
for LEVEL in $(seq 0 ${MAX_LEVEL});
do
    docker container logs phpstan_level_${LEVEL} > ${REPORTS_FOLDER}/level_${LEVEL}.json
    docker container rm --force phpstan_level_${LEVEL} >/dev/null
done
